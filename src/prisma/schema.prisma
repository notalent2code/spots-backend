generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String   @db.VarChar(256)
  first_name    String   @db.VarChar(64)
  last_name     String   @db.VarChar(64)
  phone_number  String   @unique @db.VarChar(20)
  refresh_token String?  @db.Text
  user_type     UserType
  tenant        Tenant?
  owner         Owner?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("user")
}

model Tenant {
  tenant_id  Int       @id @default(autoincrement())
  user_id    Int       @unique
  avatar_url String?   @db.VarChar(256)
  bookings   Booking[]

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "tenant_ibfk_1")

  @@map("tenant")
}

model Owner {
  owner_id         Int                       @id @default(autoincrement())
  user_id          Int                       @unique
  nik              String?                   @db.VarChar(16)
  ktp_picture      String?                   @db.VarChar(256)
  balance          Decimal                   @default(0) @db.Decimal(10, 2)
  bank_name        String?                   @db.VarChar(36)
  card_number      String?                   @db.VarChar(20)
  status           OwnerCoworkingSpaceStatus @default(PENDING)
  coworking_spaces CoworkingSpace[]

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "owner_ibfk_1")

  @@map("owner")
}

model CoworkingSpace {
  space_id                   Int                       @id @default(autoincrement())
  name                       String                    @unique @db.VarChar(64)
  description                String?                   @db.Text
  price                      Decimal                   @db.Decimal(10, 2)
  capacity                   Int
  owner_id                   Int
  status                     OwnerCoworkingSpaceStatus @default(PENDING)
  location                   Location?
  availabilities             Availability[]
  coworking_space_images     CoworkingSpaceImage[]
  coworking_space_facilities CoworkingSpaceFacility[]
  bookings                   Booking[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner Owner @relation(fields: [owner_id], references: [owner_id], onDelete: Cascade, onUpdate: Cascade, map: "coworking_space_ibfk_1")

  @@map("coworking_space")
}

model CoworkingSpaceImage {
  image_id  Int    @id @default(autoincrement())
  space_id  Int
  image_url String @db.VarChar(256)

  coworking_space CoworkingSpace @relation(fields: [space_id], references: [space_id], onDelete: Cascade, onUpdate: Cascade, map: "coworking_space_image_ibfk_1")

  @@map("coworking_space_image")
}

model Location {
  location_id Int     @id @default(autoincrement())
  space_id    Int     @unique
  address     String? @db.VarChar(256)
  latitude    Float?
  longitude   Float?

  coworking_space CoworkingSpace @relation(fields: [space_id], references: [space_id], onDelete: Cascade, onUpdate: Cascade, map: "location_ibfk_1")

  @@map("location")
}

model Facility {
  facility_id Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(64)
  description String @db.Text

  coworking_space_facilities CoworkingSpaceFacility[]

  @@map("facility")
}

model CoworkingSpaceFacility {
  space_id        Int
  facility_id     Int
  facility        Facility       @relation(fields: [facility_id], references: [facility_id], onDelete: Cascade, onUpdate: Cascade, map: "coworking_space_facility_ibfk_2")
  coworking_space CoworkingSpace @relation(fields: [space_id], references: [space_id], onDelete: Cascade, onUpdate: Cascade, map: "coworking_space_facility_ibfk_1")

  @@id([space_id, facility_id])
  @@map("coworking_space_facility")
}

model Availability {
  availability_id Int     @id @default(autoincrement())
  space_id        Int
  date            String
  start_hour      Int
  end_hour        Int
  is_booked       Boolean @default(false)

  coworking_space CoworkingSpace @relation(fields: [space_id], references: [space_id], onDelete: Cascade, onUpdate: Cascade, map: "availability_ibfk_1")

  @@map("availability")
}

model Booking {
  booking_id  String   @id @default(uuid())
  space_id    Int
  tenant_id   Int
  payment     Payment?
  date        String
  start_hour  Int
  end_hour    Int
  total_price Decimal  @db.Decimal(10, 2)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  coworking_space CoworkingSpace @relation(fields: [space_id], references: [space_id], onDelete: Cascade, onUpdate: Cascade, map: "booking_ibfk_1")
  tenant          Tenant         @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: Cascade, map: "booking_ibfk_2")

  @@index([space_id], map: "booking_space_id_index")
  @@index([tenant_id], map: "booking_tenant_id_index")
  @@map("booking")
}

model Payment {
  payment_id String        @id @default(uuid())
  booking_id String        @unique
  method     String        @db.VarChar(16)
  amount     Decimal       @db.Decimal(10, 2)
  status     String        
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  booking Booking @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade, onUpdate: Cascade, map: "payment_ibfk_1")

  @@map("payment")
}

enum UserType {
  TENANT
  OWNER
  ADMIN
}

enum OwnerCoworkingSpaceStatus {
  PENDING
  APPROVED
  REJECTED
}
